package edu.gatech.cse6250.phenotyping

import edu.gatech.cse6250.model.{ Diagnostic, LabResult, Medication }
import org.apache.spark.rdd.RDD
import java.util.Arrays
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql.types._
import org.apache.spark.sql.functions._
import scala.io.Source
//import org.apache.spark.implicits._
import edu.gatech.cse6250.helper.{ CSVHelper, SparkHelper }

//import org.apache.spark.sql.SQLContext.implicits._
/**
 * @author Hang Su <hangsu@gatech.edu>,
 * @author Sungtae An <stan84@gatech.edu>,
 */
object T2dmPhenotype {

  /** Hard code the criteria */
  val T1DM_DX = Set("250.01", "250.03", "250.11", "250.13", "250.21", "250.23", "250.31", "250.33", "250.41", "250.43",
    "250.51", "250.53", "250.61", "250.63", "250.71", "250.73", "250.81", "250.83", "250.91", "250.93")

  val T2DM_DX = Set("250.3", "250.32", "250.2", "250.22", "250.9", "250.92", "250.8", "250.82", "250.7", "250.72", "250.6",
    "250.62", "250.5", "250.52", "250.4", "250.42", "250.00", "250.02")

  val T1DM_MED = Set("lantus", "insulin glargine", "insulin aspart", "insulin detemir", "insulin lente", "insulin nph", "insulin reg", "insulin,ultralente")

  val T2DM_MED = Set("chlorpropamide", "diabinese", "diabanase", "diabinase", "glipizide", "glucotrol", "glucotrol xl",
    "glucatrol ", "glyburide", "micronase", "glynase", "diabetamide", "diabeta", "glimepiride", "amaryl",
    "repaglinide", "prandin", "nateglinide", "metformin", "rosiglitazone", "pioglitazone", "acarbose",
    "miglitol", "sitagliptin", "exenatide", "tolazamide", "acetohexamide", "troglitazone", "tolbutamide",
    "avandia", "actos", "actos", "glipizide")

  val DM_DX_related = Set("790.21", "790.22", "790.2", "790.29", "648.81", "648.82", "648.83", "648.84", "648", "648", "648.01", "648.02", "648.03", "648.04", "791.5", "277.7", "V77.1", "256.4", "250.01", "250.03", "250.11", "250.13", "250.21", "250.23", "250.31", "250.33", "250.41", "250.43", "250.51", "250.53", "250.61", "250.63", "250.71", "250.73", "250.81", "250.83", "250.91", "250.93", "250.3", "250.32", "250.2", "250.22", "250.9", "250.92", "250.8", "250.82", "250.7", "250.72", "250.6", "250.62", "250.5", "250.52", "250.4", "250.42", "250.00", "250.02")

  /**
   * Transform given data set to a RDD of patients and corresponding phenotype
   *
   * @param medication medication RDD
   * @param labResult  lab result RDD
   * @param diagnostic diagnostic code RDD
   * @return tuple in the format of (patient-ID, label). label = 1 if the patient is case, label = 2 if control, 3 otherwise
   */
  def transform(medication: RDD[Medication], labResult: RDD[LabResult], diagnostic: RDD[Diagnostic]): RDD[(String, Int)] = {
    /**
     * Remove the place holder and implement your code here.
     * Hard code the medication, lab, icd code etc. for phenotypes like example code below.
     * When testing your code, we expect your function to have no side effect,
     * i.e. do NOT read from file or write file
     *
     * You don't need to follow the example placeholder code below exactly, but do have the same return type.
     *
     * Hint: Consider case sensitivity when doing string comparisons.
     */

    val sc = medication.sparkContext
    val spark = SparkHelper.spark
    import spark.implicits._
    val sqlContext = spark.sqlContext

    /** Hard code the criteria */
    // val type1_dm_dx = Set("code1", "250.03")
    // val type1_dm_med = Set("med1", "insulin nph")
    // use the given criteria above like T1DM_DX, T2DM_DX, T1DM_MED, T2DM_MED and hard code DM_RELATED_DX criteria as well

    /** Find CASE Patients */

    val casePatients = sc.parallelize(Seq(("casePatient-one", 1), ("casePatient-two", 1), ("casePatient-three", 1)))

    var diagFilter = (diagnostic.filter(diag => !T1DM_DX.contains(diag.code))).filter(diag2 => T2DM_DX.contains(diag2.code))

    var diagPatientSet = diagFilter.map(x => x.patientID).collect()
    diagPatientSet = diagPatientSet.distinct
    println(diagPatientSet.size)

    var medication2 = medication.filter(med => diagPatientSet.contains(med.patientID))
    println("medication 2 count " + medication2.map(x => x.patientID).collect().distinct.size) // printing med size

    var medContainsT1DM_MED = medication2.filter(med => T1DM_MED.contains(med.medicine.toLowerCase))

    var medT1DM_Patients = medContainsT1DM_MED.map(x => x.patientID).collect()
    //println("patients with T1 " + medT1DM_Patients.distinct.size)

    var medNotContainsT1DM_MED_Case = diagFilter.filter(diag => !medT1DM_Patients.contains(diag.patientID))
    
    //var med_case1 = medNotContainsT1DM_MED_Case.map(x => x.patientID).collect().distinct.size
    //println("patients without T1 " + med_case1)

    //var medT1DM_Patients = medContainsT1DM_MED.map(x => x.patientID).collect()
    //var medT2DM_Case = medication2.filter(med => medT1DM_Patients.contains(med.patientID) && !T1DM_MED.contains(med.medicine.toLowerCase) && !T2DM_MED.contains(med.medicine.toLowerCase))

    //println("T2 med case " + medT2DM_Case.map(x=> x.patientID).collect().distinct.size)
    var medT1T2 = medication2.filter(med => medT1DM_Patients.contains(med.patientID) && T2DM_MED.contains(med.medicine.toLowerCase))

    // var medPreced = medT1T2.join(medContainsT1DM_MED)
    var medT1T2_P = medT1T2.map(x => x.patientID).collect().distinct
    var medT2DM_Case = medContainsT1DM_MED.filter(med => !medT1T2_P.contains(med.patientID))

    //println("T2 count " + medT1T2.map(x => x.patientID).collect().distinct.size)

    //println("T2 med case " + medT2DM_Case.map(x => x.patientID).collect().distinct.size)

    var med1DF = sqlContext.createDataFrame(medContainsT1DM_MED)
    med1DF.createOrReplaceTempView("medt1")
    var med2 = sqlContext.sql("select patientID as t1_patientID, min(date) as t1_date from medt1 group by patientID")

    medT1T2DF.createOrReplaceTempView("medt2")
    var med3 = sqlContext.sql("select patientID as t2_patientID , min(date) as t2_date from medt2 group by patientID")

    var med4 = med3.join(med2, med2.col("t1_patientID") === med3.col("t2_patientID"))
    med4.createOrReplaceTempView("med4")
    var med5 = sqlContext.sql("select t1_patientID from med4 where t1_date> t2_date")
    med5.show()
   
    var Case1 = medNotContainsT1DM_MED_Case.map(t => (t.patientID, 1))
    var Case2 = medT2DM_Case.map(t => (t.patientID, 1))
    var Case3 = med5.map(t => (t.getString(0), 1)) 
    var Case_3 = Case3.rdd
    
    var AllCases = sc.union(Case1, Case2, Case_3)
    AllCases = AllCases.distinct()
    println("all cases count " + AllCases.collect().size)
    var labFilter = labResult.filter(r1 => (r1.testName.contains("glucose") || r1.testName.contains("Glucose")) && !((r1.testName == ("Fasting Glucose") && r1.value >= 110) || (r1.testName == ("Fasting blood glucose") && r1.value >= 110) || (r1.testName == ("fasting plasma glucose") && r1.value >= 110) || (r1.testName == ("Glucose") && r1.value > 110) || (r1.testName == ("glucose") && r1.value > 110) || (r1.testName == ("Glucose, Serum") && r1.value > 110)))

    var labPatients = labFilter.map(x => x.patientID).collect()

    var Control = diagnostic.filter(x => labPatients.contains(x.patientID) && !DM_DX_related.contains(x.code))
    var controlPatients = Control.map(x => (x.patientID, 0))

    controlPatients = controlPatients.distinct()

    var medPatient = medication.map(x => x.patientID)
    var labPatient = labResult.map(x => x.patientID)
    var diagP = diagnostic.map(x => x.patientID)

    var M_L_D = sc.union(labPatient, diagP, medPatient)
    M_L_D = M_L_D.distinct()

    var case_control = AllCases.union(controlPatients)
    var ccP = case_control.map(x => x._1).collect()
    var others1 = M_L_D.filter(x => !ccP.contains(x))

    var others2 = others1.map(x => (x, 3))
    var others = others2
    println(diagP.getClass().toString())
    /** Find OTHER Patients */
    // val others = sc.parallelize(Seq(("others-one", 3), ("others-two", 3), ("others-three", 3)))

    /** Once you find patients for each group, make them as a single RDD[(String, Int)] */
    val phenotypeLabel = sc.union(AllCases, controlPatients, others)

    /** Return */
    phenotypeLabel
  }
}
